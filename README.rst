calmjs.parse
============

A collection of parsers and helper libraries for understanding
ECMAScript.  This is a fork of the parser provided by |slmit|_.

.. image:: https://travis-ci.org/calmjs/calmjs.parse.svg?branch=master
    :target: https://travis-ci.org/calmjs/calmjs.parse
.. image:: https://ci.appveyor.com/api/projects/status/5dj8dnu9gmj02msu/branch/master?svg=true
    :target: https://ci.appveyor.com/project/metatoaster/calmjs-parse/branch/master
.. image:: https://coveralls.io/repos/github/calmjs/calmjs.parse/badge.svg?branch=master
    :target: https://coveralls.io/github/calmjs/calmjs.parse?branch=master

.. |calmjs.parse| replace:: ``calmjs.parse``
.. |ply| replace:: ``ply``
.. |slimit| replace:: ``slimit``
.. _ply: https://pypi.python.org/pypi/ply
.. _slimit: https://pypi.python.org/pypi/slimit


Introduction
------------

For any kind of build system that operates with JavaScript code in
conjunction with a module system, the ability to understand what modules
the provided sources require is paramount.  Thus a number of packages
provided by the Calmjs project require the ability to have a
comprehensive understanding of given JavaScript sources.  This goal
was originally achieved using |slimit|_, a JavaScript minifier library
that also provided a comprehensive parser class that was built using
Python Lex-Yacc (i.e. |ply|_).

However, as of mid-2017, it was noted that |slimit| remained in a
minimum state of maintenance for over four years (its most recent
release, 0.8.1, was made 2013-03-26), along with a number of serious
outstanding issues have left unattended and unresolved for the duration
of that timespan.  As the development of the Calmjs framework require
those issues to be rectified as soon as possible, a decision to fork the
parser portion of |slimit| was made, in order to cater to the interests
current to Calmjs project at that moment in time.

The fork was initial cut from another fork of |slimit| (specifically
`lelit/slimit <https://github.com/lelit/slimit>`), as it brought in a
number of implemented bug fixes.  To ensure a better quality control
and assurance, a number of problematic patches were removed, new tests
were created to bring in full test coverage, and grammar rules were
updated to ensure better conformance with the ECMA-262 specification
(i.e. ES5), with the test cases sourced from the issues reported on the
issue tracker for |slimit|.

The goal of |calmjs.parse| is to provide a similar parser API as the
parser that |slimit| had provided.  The mangling and minification
functionalities as provided by the original has been left out as they
are not relevant to code parsing.  A separate package containing those
mangling and minifying features as provided by |slimit| may be released
in the future.


Installation
------------

The following command may be executed to source the |calmjs.parse| wheel
from PyPI for installation into the current Python environment.

.. code:: sh

    $ pip install calmjs.parse

Please note that |calmjs.parse| depends on |ply| versions 3.6 or above,
however the wheel will only contain the optimized versions of the
generated Lex and Yacc modules for up to 3.10 (the latest release as of
mid-2017); if a later version of |ply| becomes available and installed,
either downgrade that back to 3.10 or perform the manual optimization
step as outlined below.

Alternative installation methods (for developers, advanced users)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Development is still ongoing with |calmjs.parse|, for the latest
features and bug fixes, the development version may be installed through
git like so:

.. code:: sh

    $ pip install git+https://github.com/calmjs/calmjs.parse.git#egg=calmjs.parse

Alternatively, the git repository can be cloned directly and execute
``python setup.py develop`` while inside the root of the source
directory.

A manual optimization step may need to be performed for platforms and
systems that do not have utf8 as their default encoding.

Manual optimization
~~~~~~~~~~~~~~~~~~~

As Ply and Yacc require the generation of symbol tables, a way to
optimize the performance is to cache this generation.  For |ply|, this
is done using an autogenerated module.  However, the generated file is
marked with a version number specific to the installed version of |ply|,
so that different versions may not necessarily be able to reuse the same
file.

Typically, the process for this optimization is automatic and a correct
symbol table will be generated, however there are cases where this will
fail, so for this reason |calmjs.parse| provide a helper module and
executable that can be optionally invoked to ensure that the correct
encoding be used to generate that file.  Other reasons where this may be
necessary is to allow system administrators to do so for their end
users, as they may not have write privileges at that level.

To execute the optimizer from the shell, the provided helper script may
be used like so:

.. code:: sh

    $ python -m calmjs.parse.parsers.optimize

If warnings appear that warn that tokens are defined but not used, they
may be safely ignored.

This step is generally optionally for users who installed this package
from PyPI via a Python wheel, provided the caveats as outlined in the
installation section are met.


Usage
-----

As this is a library, no executable shell commands are provided.  There
is however a helper function provided at the top level, it may be used
like so:

.. code:: python

    >>> from calmjs.parse import es5
    >>> program = es5('''
    ... // simple program
    ... var main = function(greet) {
    ...     var hello = "hello " + greet;
    ...     return hello;
    ... };
    ... ''')
    >>> program
    <calmjs.parse.asttypes.ES5Program object at 0x7fb157e00b38>

The parser classes are organized under the ``calmjs.parse.parsers``
module, with each language being under their own module.  A
corresponding lexer class with the same name is also provided under the
``calmjs.parse.lexers`` module.  For the monent, only ES5 support is
implemented.

Visitor classes are defined under the appropriate named modules; please
refer to their docstrings for documentation on their usage.  A quick
example to show how the es5 visitor may be used to regenerate the source
tree back into text for the above example:

.. code:: python

    >>> from calmjs.parse.visitors.es5.ecmavisitor import ECMAVisitor
    >>> visitor = ECMAVisitor()
    >>> print(visitor.visit(program))
    var main = function(greet) {
      var hello = "hello " + greet;
      return hello;
    };

Note the change in indentation and the lack of comments, as this visitor
implementation has their own indentation scheme and the parser currently
skips over comments.

Troubleshooting
---------------

Instantiation the parser fails with ``UnicodeEncodeError``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For platforms or systems that do not have utf8 configured as the default
encoding, the automatic table generation may fail when constructing a
parser instance.  An example:

.. code:: python-doctest

    >>> from calmjs.parse.parsers import es5
    >>> parser = es5.Parser()
    Traceback (most recent call last):
      ...
      File "c:\python35\lib\site-packages\ply-3.10-py3.5.egg\ply\lex.py", line 1043, in lex
        lexobj.writetab(lextab, outputdir)
      File "c:\python35\lib\site-packages\ply-3.10-py3.5.egg\ply\lex.py", line 195, in writetab
        tf.write('_lexstatere   = %s\n' % repr(tabre))
      File "c:\python35\lib\encodings\cp1252.py", line 19, in encode
        return codecs.charmap_encode(input,self.errors,encoding_table)[0]
    UnicodeEncodeError: 'charmap' codec can't encode character '\u02c1' in position 2488: character maps to <undefined>

A workaround helper script is provided, it may be executed like so:

.. code:: sh

    $ python -m calmjs.parse.parsers.optimize

For more details, refer to the ``Manual optimization`` section of this
document.


Legal
-----

The |calmjs.parse| package is copyright (c) 2017 Auckland Bioengineering
Institute, University of Auckland.  The |calmjs.parse| package is
licensed under the MIT license (specifically, the Expat License), which
is also the same license that the package |slimit| was released under.

The lexer, parser, visitor and the other types definitions portions were
originally imported from the |slimit| package; |slimit| is copyright (c)
Ruslan Spivak.

The Calmjs project is copyright (c) 2017 Auckland Bioengineering
Institute, University of Auckland.
